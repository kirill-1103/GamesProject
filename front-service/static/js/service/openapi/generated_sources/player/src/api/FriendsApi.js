/**
 * API Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FriendRequestOpenApi from '../model/FriendRequestOpenApi';
import PlayerOpenApi from '../model/PlayerOpenApi';

/**
* Friends service.
* @module api/FriendsApi
* @version 1.0
*/
export default class FriendsApi {

    /**
    * Constructs a new FriendsApi. 
    * @alias module:api/FriendsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptFriendRequest operation.
     * @callback module:api/FriendsApi~acceptFriendRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * accept friend request
     * @param {Number} requestId 
     * @param {module:api/FriendsApi~acceptFriendRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    acceptFriendRequest(requestId, callback) {
      let postBody = null;
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling acceptFriendRequest");
      }

      let pathParams = {
        'request_id': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/friends/request/accept/{request_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFriends operation.
     * @callback module:api/FriendsApi~getFriendsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerOpenApi>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get friends
     * @param {Number} id 
     * @param {Number} from 
     * @param {Number} to 
     * @param {module:api/FriendsApi~getFriendsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerOpenApi>}
     */
    getFriends(id, from, to, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFriends");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling getFriends");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling getFriends");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'from': from,
        'to': to
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerOpenApi];
      return this.apiClient.callApi(
        '/friends', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceivedFriendRequest operation.
     * @callback module:api/FriendsApi~getReceivedFriendRequestCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FriendRequestOpenApi>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get received friend requests
     * @param {Number} playerId 
     * @param {module:api/FriendsApi~getReceivedFriendRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FriendRequestOpenApi>}
     */
    getReceivedFriendRequest(playerId, callback) {
      let postBody = null;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling getReceivedFriendRequest");
      }

      let pathParams = {
        'player_id': playerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FriendRequestOpenApi];
      return this.apiClient.callApi(
        '/friends/request/received/{player_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSentFriendRequest operation.
     * @callback module:api/FriendsApi~getSentFriendRequestCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FriendRequestOpenApi>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get sent friend requests
     * @param {Number} playerId 
     * @param {module:api/FriendsApi~getSentFriendRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FriendRequestOpenApi>}
     */
    getSentFriendRequest(playerId, callback) {
      let postBody = null;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling getSentFriendRequest");
      }

      let pathParams = {
        'player_id': playerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FriendRequestOpenApi];
      return this.apiClient.callApi(
        '/friends/request/sent/{player_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectFriendRequest operation.
     * @callback module:api/FriendsApi~rejectFriendRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reject friend request
     * @param {Number} requestId 
     * @param {module:api/FriendsApi~rejectFriendRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rejectFriendRequest(requestId, callback) {
      let postBody = null;
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling rejectFriendRequest");
      }

      let pathParams = {
        'request_id': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/friends/request/reject/{request_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFriend operation.
     * @callback module:api/FriendsApi~removeFriendCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove friend
     * @param {Number} friendId 
     * @param {Number} playerId 
     * @param {module:api/FriendsApi~removeFriendCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeFriend(friendId, playerId, callback) {
      let postBody = null;
      // verify the required parameter 'friendId' is set
      if (friendId === undefined || friendId === null) {
        throw new Error("Missing the required parameter 'friendId' when calling removeFriend");
      }
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling removeFriend");
      }

      let pathParams = {
        'friend_id': friendId,
        'player_id': playerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/friends/{player_id}/{friend_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeFriendRequest operation.
     * @callback module:api/FriendsApi~revokeFriendRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * revoke friend request
     * @param {Number} requestId 
     * @param {module:api/FriendsApi~revokeFriendRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeFriendRequest(requestId, callback) {
      let postBody = null;
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling revokeFriendRequest");
      }

      let pathParams = {
        'request_id': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/friends/request/{request_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendFriendRequest operation.
     * @callback module:api/FriendsApi~sendFriendRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * send friend request
     * @param {module:model/FriendRequestOpenApi} friendRequestOpenApi 
     * @param {module:api/FriendsApi~sendFriendRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendFriendRequest(friendRequestOpenApi, callback) {
      let postBody = friendRequestOpenApi;
      // verify the required parameter 'friendRequestOpenApi' is set
      if (friendRequestOpenApi === undefined || friendRequestOpenApi === null) {
        throw new Error("Missing the required parameter 'friendRequestOpenApi' when calling sendFriendRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/friends/request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
